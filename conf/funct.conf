# HELP AND OPTIONS (v1.2.6)
# =========================


# OPTIONAL ARGUMENTS:
# ------------------
# Disable the use of ANSI color escapes.
# no-color

# Use ANSI color escapes. This is the default behaviour. This switch is used to
# override a configuration file setting.
# color
color

# Invokes formatters without executing the steps.
# dry-run

# Define user-specific data for the config.userdata dictionary.
# Example: -D foo=bar to store it in config.userdata["foo"].
# define NAME=VALUE

# Don't run feature files matching regular expression PATTERN.
# exclude PATTERN

# Only run feature files matching regular expression PATTERN.
# include PATTERN

# Don't output JUnit-compatible reports.
# no-junit

# Output JUnit-compatible reports. When junit is enabled, all stdout and stderr
# will be redirected and dumped to the junit report, regardless of the
# "capture" and "no-capture" options.
# junit

# Directory in which to store JUnit reports.
# junit-directory PATH

# Specify a formatter. If none is specified the default formatter is used. Pass
# "format help" to get a list of available formatters.
#
# Available formatters:
#     json           JSON dump of test run
#     json.pretty    JSON dump of test run (human readable)
#     null           Provides formatter that does not output anything.
#     plain          Very basic formatter with maximum compatibility
#     pretty         Standard colourised pretty formatter
#     progress       Shows dotted progress for each executed scenario.
#     progress2      Shows dotted progress for each executed step.
#     progress3      Shows detailed progress for each step of a scenario.
#     rerun          Emits scenario file locations of failing scenarios
#     sphinx.steps   Generate sphinx-based documentation for step definitions.
#     steps          Shows step definitions (step implementations).
#     steps.catalog  Shows non-technical documentation for step definitions.
#     steps.doc      Shows documentation for step definitions.
#     steps.usage    Shows how step definitions are used by steps.
#     tags           Shows tags (and how often they are used).
#     tags.location  Shows tags and the location where they are used.
#
# format FORMAT
format pretty

# Show a catalog of all available step definitions.
# SAME AS: --format=steps.catalog --dry-run --no-summary -q
# steps-catalog

# Don't print skipped steps (due to tags).
# no-skipped

# Print skipped steps. This is the default behaviour. This switch is used to
# override a configuration file setting.
# show-skipped

# Don't print snippets for unimplemented steps.
# no-snippets

# Print snippets for unimplemented steps. This is the default behaviour. This
# switch is used to override a configuration file setting.
# snippets

# Don't print multiline strings and tables under steps.
# no-multiline

# Print multiline strings and tables under steps. This is the default behaviour.
# This switch is used to override a configuration file setting.
# multiline

# Only execute the feature elements which match part of the given name. If this
# option is given more than once, it will match against all the given names.
# name NAME

# Don't capture stdout (any stdout output will be printed immediately.)
# no-capture

# Capture stdout (any stdout output will be printed if there is a failure.) This
# is the default behaviour. This switch is used to override a configuration file
# setting.
# capture
capture

# Don't capture stderr (any stderr output will be printed immediately.)
# no-capture-stderr

# Capture stderr (any stderr output will be printed if there is a failure.) This
# is the default behaviour. This switch is used to override a configuration file
# setting.
# capture-stderr
capture-stderr

# Don't capture logging. Logging configuration will be left intact.
# no-logcapture

# Capture logging. All logging during a step will be captured and displayed in
# the event of a failure. This is the default behaviour. This switch is used to
# override a configuration file setting.
# logcapture
logcapture

# Specify a level to capture logging at. The default is INFO - capturing
# everything.
#
# Use: CRITICAL, FATAL, ERROR, WARNING, WARN, INFO, DEBUG
#
# logging-level LOGGING_LEVEL
logging-level INFO

# Specify custom format to print statements. Uses the same format as used by
# standard logging handlers.
# The default is "%(levelname)s:%(name)s:%(message)s".
# logging-format LOGGING_FORMAT
logging-format %(levelname)s:%(name)s:%(message)s

# Specify custom date/time format to print statements. Uses the same format as
# used by standard logging handlers.
# logging-datefmt LOGGING_DATEFMT

# Specify which statements to filter in/out. By default, everything is captured.
# If the output is too verbose, use this option to filter out needless output.
# Example: "logging-filter=foo" will capture statements issued ONLY to foo or
# foo.what.ever.sub but not foobar or other logger. Specify multiple loggers
# with comma: filter=foo,bar,baz. If any logger name is prefixed with a minus,
# eg filter=-foo, it will be excluded rather than included.
# logging-filter LOGGING_FILTER

# Clear all other logging handlers.
# logging-clear-handlers

# Don't display the summary at the end of the run.
# no-summary

# Display the summary at the end of the run.
# summary
summary

# Write to specified file instead of stdout.
# outfile FILE
outfile ./log/stdout.log

# Alias for --no-snippets --no-source.
# quiet

# Don't print the file and line of the step definition with the steps.
# no-source

# Print the file and line of the step definition with the steps. This is the
# default behaviour. This switch is used to override a configuration file
# setting.
# show-source
show-source

# Defines the current test stage. The test stage name is used as name prefix for
# the environment file and the steps directory (instead of default path names).
# stage STAGE

# Stop running tests at the first failure.
# stop

# Only execute features or scenarios with tags matching TAG_EXPRESSION.
# Pass "tags-help" for more information.
# tags TAG_EXPRESSION

# Don't print the time taken for each step.
# no-timings

# Print the time taken, in seconds, of each step after the step has completed.
# This is the default behaviour. This switch is used to override a configuration
# file setting.
# show-timings
show-timings

# Show the files and features loaded.
#verbose
verbose

# Only run scenarios tagged with "wip". Additionally: use the "plain" formatter,
# do not capture stdout or logging output and stop at the first failure.
# wip

# Expand scenario outline tables in output.
# expand

# Use keywords for a language other than English.
# lang LANG
lang en

# List the languages available for "lang".
#
# Languages available:
#     ar: العربية / Arabic
#     bg: български / Bulgarian
#     ca: català / Catalan
#     cs: Česky / Czech
#     cy-GB: Cymraeg / Welsh
#     da: dansk / Danish
#     de: Deutsch / German
#     en: English / English
#     en-Scouse: Scouse / Scouse
#     en-au: Australian / Australian
#     en-lol: LOLCAT / LOLCAT
#     en-pirate: Pirate / Pirate
#     en-tx: Texan / Texan
#     eo: Esperanto / Esperanto
#     es: español / Spanish
#     et: eesti keel / Estonian
#     fi: suomi / Finnish
#     fr: français / French
#     gl: galego / Galician
#     he: עברית / Hebrew
#     hr: hrvatski / Croatian
#     hu: magyar / Hungarian
#     id: Bahasa Indonesia / Indonesian
#     is: Íslenska / Icelandic
#     it: italiano / Italian
#     ja: 日本語 / Japanese
#     ko: 한국어 / Korean
#     lt: lietuvių kalba / Lithuanian
#     lu: Lëtzebuergesch / Luxemburgish
#     lv: latviešu / Latvian
#     nl: Nederlands / Dutch
#     no: norsk / Norwegian
#     pl: polski / Polish
#     pt: português / Portuguese
#     ro: română / Romanian
#     ru: русский / Russian
#     sk: Slovensky / Slovak
#     sr-Cyrl: Српски / Serbian
#     sr-Latn: Srpski (Latinica) / Serbian (Latin)
#     sv: Svenska / Swedish
#     tr: Türkçe / Turkish
#     uk: Українська / Ukrainian
#     uz: Узбекча / Uzbek
#     vi: Tiếng Việt / Vietnamese
#     zh-CN: 简体中文 / Chinese simplified
#     zh-TW: 繁體中文 / Chinese traditional
#
# lang-list

# List the translations accepted for one language.
#
# Translations for English / English
#     And: And
#     Background: Background
#     But: But
#     Examples: Examples, Scenarios
#     Feature: Feature
#     Given: Given
#     Scenario: Scenario
#     Scenario Outline: Scenario Outline, Scenario Template
#     Then: Then
#     When: When
#
# lang-help LANG
#lang-help en

# Show help for tag expressions.
#
# Scenarios inherit tags declared on the Feature level. The simplest
#     TAG_EXPRESSION is simply a tag::
#         --tags @dev
# 
#     You may even leave off the "@" - behave doesn't mind. When a tag in a tag
#     expression starts with a ~, this represents boolean NOT::
#         --tags ~@dev
#
#     A tag expression can have several tags separated by a comma, which
#     represents logical OR::
#         --tags @dev,@wip
#
#     The --tags option can be specified several times, and this represents
#     logical AND, for instance this represents the boolean expression
#     "(@foo or not @bar) and @zap"::
#         --tags @foo,~@bar --tags @zap.
#
#     Beware that if you want to use several negative tags to exclude several
#     tags you have to use logical AND::
#         --tags ~@fixme --tags ~@buggy.
#
# tags-help
